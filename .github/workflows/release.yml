name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: |
            ## Changes in this Release

            ### CLI Tool
            - Multi-platform support (Linux, macOS, Windows)
            - Both x86_64 and ARM64 architectures

            ### Plugins
            - k8s_port_forward: Kubernetes port forwarding with name and label support

            ### Installation

            #### CLI Tool
            Download the appropriate binary for your platform:
            - Linux x86_64: `proxy-linux-x86_64`
            - Linux ARM64: `proxy-linux-aarch64`
            - macOS x86_64: `proxy-macos-x86_64`
            - macOS ARM64: `proxy-macos-aarch64`
            - Windows x86_64: `proxy-windows-x86_64.exe`

            #### Plugins
            Download the plugin package for your platform and extract to:
            - Linux/macOS: `~/.cohandv/proxy/plugins/`
            - Windows: `%USERPROFILE%\.cohandv\proxy\plugins\`

            ### Usage
            ```bash
            # Make executable (Linux/macOS)
            chmod +x proxy-*

            # Run CLI
            ./proxy-* --help

            # List available plugins
            ./proxy-* --help

            # Use k8s_port_forward plugin
            ./proxy-* k8s_port_forward --help
            ```
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload Release Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cli_name: proxy-linux-x86_64
            plugins_name: plugins-linux-x86_64.tar.gz
            ext: so
            prefix: lib
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cli_name: proxy-linux-aarch64
            plugins_name: plugins-linux-aarch64.tar.gz
            ext: so
            prefix: lib
          - target: x86_64-apple-darwin
            os: macos-latest
            cli_name: proxy-macos-x86_64
            plugins_name: plugins-macos-x86_64.tar.gz
            ext: dylib
            prefix: lib
          - target: aarch64-apple-darwin
            os: macos-latest
            cli_name: proxy-macos-aarch64
            plugins_name: plugins-macos-aarch64.tar.gz
            ext: dylib
            prefix: lib
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cli_name: proxy-windows-x86_64.exe
            plugins_name: plugins-windows-x86_64.zip
            ext: dll
            prefix: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0
          components: rustfmt, clippy
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "Setting up ARM64 cross-compilation..."
          sudo apt-get update
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config libssl-dev libssl-dev:arm64
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "ARM64 cross-compilation setup complete"

      - name: Build CLI
        run: cargo build --release --target ${{ matrix.target }} --bin proxy

      - name: Build plugins
        run: |
          # Build all workspace libraries explicitly
          cargo build --release --target ${{ matrix.target }} -p plugin_api
          cargo build --release --target ${{ matrix.target }} -p k8s_port_forward
          cargo build --release --target ${{ matrix.target }} -p ollama_chat

      - name: Debug - List build output (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Contents of target/${{ matrix.target }}/release:"
          ls -la target/${{ matrix.target }}/release/
          echo ""
          echo "Looking for files matching pattern: ${{ matrix.prefix }}*.${{ matrix.ext }}"
          find target/${{ matrix.target }}/release -name "${{ matrix.prefix }}*.${{ matrix.ext }}" || echo "No files found with pattern"

      - name: Debug - List build output (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Contents of target/${{ matrix.target }}/release:"
          Get-ChildItem target/${{ matrix.target }}/release/ | Format-Table
          Write-Host ""
          Write-Host "Looking for files matching pattern: *.${{ matrix.ext }}"
          Get-ChildItem target/${{ matrix.target }}/release/ -Filter "*.${{ matrix.ext }}" | Select-Object Name

      - name: Prepare CLI binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/proxy ${{ matrix.cli_name }}
          chmod +x ${{ matrix.cli_name }}

      - name: Prepare CLI binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/proxy.exe ${{ matrix.cli_name }}

      - name: Package plugins (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p plugins-package
          find target/${{ matrix.target }}/release -name "${{ matrix.prefix }}*.${{ matrix.ext }}" -not -name "${{ matrix.prefix }}plugin_api.${{ matrix.ext }}" -exec cp {} plugins-package/ \;
          # Debug: List what we found
          echo "Found plugin files:"
          ls -la plugins-package/
          # Create README for plugins
          cat > plugins-package/README.md << 'EOF'
          # Proxy Plugins for ${{ matrix.target }}

          ## Installation
          Copy these files to your plugin directory:
          - Default: `~/.cohandv/proxy/plugins/`
          - Or set: `export PROXY_PLUGIN_DIR=/path/to/plugins`

          ## Available Plugins
          - `libk8s_port_forward.${{ matrix.ext }}`: Kubernetes port forwarding

          ## Usage
          ```bash
          # Set up plugin directory
          mkdir -p ~/.cohandv/proxy/plugins
          cp *.{{ matrix.ext }} ~/.cohandv/proxy/plugins/

          # Use plugins
          proxy k8s_port_forward --help
          ```
          EOF
          tar -czf ${{ matrix.plugins_name }} -C plugins-package .

      - name: Package plugins (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p plugins-package
          find target/${{ matrix.target }}/release -name "*.${{ matrix.ext }}" -not -name "plugin_api.${{ matrix.ext }}" -exec cp {} plugins-package/ \;
          # Debug: List what we found
          echo "Found plugin files:"
          ls -la plugins-package/ 2>/dev/null || dir plugins-package/
          # Create README for plugins
          cat > plugins-package/README.md << 'EOF'
          # Proxy Plugins for ${{ matrix.target }}

          ## Installation
          Copy these files to your plugin directory:
          - Default: `%USERPROFILE%\.cohandv\proxy\plugins\`
          - Or set: `set PROXY_PLUGIN_DIR=C:\path\to\plugins`

          ## Available Plugins
          - `k8s_port_forward.${{ matrix.ext }}`: Kubernetes port forwarding

          ## Usage
          ```cmd
          REM Set up plugin directory
          mkdir "%USERPROFILE%\.cohandv\proxy\plugins"
          copy *.${{ matrix.ext }} "%USERPROFILE%\.cohandv\proxy\plugins\"

          REM Use plugins
          proxy.exe k8s_port_forward --help
          ```
          EOF
          # Use PowerShell to create zip on Windows
          powershell Compress-Archive -Path plugins-package\* -DestinationPath ${{ matrix.plugins_name }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: |
            ${{ matrix.cli_name }}
            ${{ matrix.plugins_name }}

  publish-checksums:
    name: Publish Checksums
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Download all release assets
        uses: robinraju/release-downloader@v1.12
        with:
          repository: ${{ github.repository }}
          tag: ${{ needs.create-release.outputs.tag }}
          tarBall: false
          zipBall: false
          out-file-path: assets/

      - name: Generate checksums
        run: |
          cd assets
          sha256sum * > SHA256SUMS
          cat SHA256SUMS

      - name: Upload checksums
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: ./assets/SHA256SUMS
